class Solution {
    // 参考力扣
    var n = 0
    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {
        n = graph.count
        var dirty = Array(repeating: false, count: n)
        for x in initial {
            dirty[x] = true
        }
        var infectedBy = Array(repeating: [Int](), count: n)
        for u in initial {
            var seen = Array(repeating: false, count: n)
            dfs(graph, &seen, dirty, u)
            for v in 0..<n where seen[v] {
                infectedBy[v].append(u)
            } 
        }
        var contribution = Array(repeating: 0, count: n)
        for v in 0..<n {
            if infectedBy[v].count == 1 {
                contribution[infectedBy[v][0]] += 1
            }
        }
        var initialSorted = initial
        var ans = initialSorted[0]
        var ansSize = -1
        for u in initialSorted {
            let score = contribution[u]
            if ansSize < score || ansSize == score && u < ans {
                ans = u
                ansSize = score
            }
        }
        return ans
    }

    func dfs(_ graph: [[Int]], _ seen: inout [Bool], _ dirty: [Bool], _ u: Int) {
        for v in 0..<n {
            if graph[u][v] == 1 && !seen[v] && !dirty[v] {
                seen[v] = true
                dfs(graph, &seen, dirty, v)
            }
        }
    }
}