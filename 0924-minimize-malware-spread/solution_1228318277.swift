class Solution {
    var n = 0
    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {
        n = graph.count
        var color = 0
        var colors = Array(repeating: -1, count: n)
        for node in 0..<n {
            if colors[node] == -1 {
                dfs(graph, &colors, node, color)
                color += 1
            }
        }
        var size = Array(repeating: 0, count: color)
        for c in colors {
            size[c] += 1
        }
        var initialColors = Array(repeating: 0, count: color)
        for node in initial {
            initialColors[colors[node]] += 1
        }
        var ans = Int.max
        for node in initial {
            let c = colors[node]
            if initialColors[c] == 1 {
                if ans == Int.max {
                    ans = node
                } else if size[c] > size[colors[ans]] {
                    ans = node
                } else if size[c] == size[colors[ans]] && node < ans {
                    ans = node
                }
            }
        }
        if ans == Int.max {
            ans = initial.reduce(Int.max) { $0 < $1 ? $0 : $1 }
        }
        return ans
    }

    func dfs(_ graph: [[Int]], _ colors: inout [Int], _ node: Int, _ color: Int) {
        colors[node] = color
        for i in 0..<n {
            if graph[node][i] == 1 && colors[i] == -1 {
                dfs(graph, &colors, i, color)
            }
        }
    }
}